name: Tic Tac Toe CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-html pytest-timeout
        pip install flake8 black mypy pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Format check with black
      run: |
        black --check --diff tictactoe.py test_tictactoe.py
      continue-on-error: true
    
    - name: Lint with pylint
      run: |
        pylint tictactoe.py --fail-under=8.0
      continue-on-error: true
    
    - name: Type check with mypy
      run: |
        mypy tictactoe.py --ignore-missing-imports --no-strict-optional
      continue-on-error: true
    
    - name: Run unit tests with pytest
      run: |
        pytest test_tictactoe.py -v \
          --cov=tictactoe \
          --cov-report=xml \
          --cov-report=term \
          --cov-report=html \
          --timeout=10 \
          --html=report.html \
          --self-contained-html
    
    - name: Check test coverage
      run: |
        coverage report --fail-under=90
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pytest-report-${{ matrix.python-version }}
        path: |
          report.html
          htmlcov/

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install quality tools
      run: |
        pip install radon xenon complexity bandit safety
    
    - name: Code complexity analysis
      run: |
        echo "=== Cyclomatic Complexity ==="
        radon cc tictactoe.py -s
        
        echo "=== Maintainability Index ==="
        radon mi tictactoe.py -s
        
        echo "=== Raw Metrics ==="
        radon raw tictactoe.py -s
    
    - name: Check code complexity thresholds
      run: |
        xenon --max-absolute B --max-modules B --max-average A tictactoe.py
      continue-on-error: true
    
    - name: Security scan with bandit
      run: |
        bandit -r tictactoe.py -f json -o bandit-report.json
        bandit -r tictactoe.py -f txt
      continue-on-error: true
    
    - name: Check for known vulnerabilities
      run: |
        safety check --json
      continue-on-error: true
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json
      if: always()

  performance:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install performance tools
      run: |
        pip install memory_profiler pytest-benchmark
    
    - name: Create performance test
      run: |
        cat > test_performance.py << 'EOF'
        import time
        import pytest
        from tictactoe import TicTacToe
        
        def test_game_creation_speed(benchmark):
            """Test game creation performance"""
            benchmark(TicTacToe)
        
        def test_move_performance(benchmark):
            """Test move making performance"""
            def make_moves():
                game = TicTacToe()
                for i in range(3):
                    for j in range(3):
                        if game.is_valid_move(i, j):
                            game.make_move(i, j)
            benchmark(make_moves)
        
        def test_winner_check_performance(benchmark):
            """Test winner checking performance"""
            game = TicTacToe()
            game.board = [['X', 'X', 'O'], ['O', 'X', 'O'], ['O', 'O', 'X']]
            benchmark(game.check_winner)
        
        def test_available_moves_performance(benchmark):
            """Test getting available moves performance"""
            game = TicTacToe()
            benchmark(game.get_available_moves)
        EOF
    
    - name: Run performance benchmarks
      run: |
        pytest test_performance.py --benchmark-only --benchmark-json=benchmark.json
    
    - name: Profile memory usage
      run: |
        cat > profile_memory.py << 'EOF'
        import tracemalloc
        from tictactoe import TicTacToe
        
        tracemalloc.start()
        
        # Simulate multiple games
        games = []
        for _ in range(1000):
            game = TicTacToe()
            # Play a complete game
            moves = [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)]
            for move in moves[:5]:
                game.make_move(move[0], move[1])
            games.append(game)
        
        current, peak = tracemalloc.get_traced_memory()
        print(f"Current memory usage: {current / 10**6:.2f} MB")
        print(f"Peak memory usage: {peak / 10**6:.2f} MB")
        print(f"Memory per game: {current / len(games):.2f} bytes")
        
        tracemalloc.stop()
        EOF
        
        python profile_memory.py
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: benchmark.json
      if: always()

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install documentation tools
      run: |
        pip install pydoc-markdown pdoc3 interrogate
    
    - name: Generate API documentation
      run: |
        mkdir -p docs
        pdoc3 --html --output-dir docs tictactoe
    
    - name: Check docstring coverage
      run: |
        interrogate tictactoe.py -v --fail-under=80
      continue-on-error: true
    
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/
      if: always()

  build-and-package:
    needs: [test, code-quality]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build tools
      run: |
        pip install build setuptools wheel twine
    
    - name: Create setup.py
      run: |
        cat > setup.py << EOF
        from setuptools import setup, find_packages
        
        with open("README.md", "r", encoding="utf-8") as fh:
            long_description = fh.read()
        
        setup(
            name="tictactoe-game",
            version="1.0.0",
            author="Your Name",
            author_email="your.email@example.com",
            description="A simple two-player Tic Tac Toe game in Python",
            long_description=long_description,
            long_description_content_type="text/markdown",
            url="https://github.com/praveenramk/tictactoe-game",
            py_modules=["tictactoe"],
            classifiers=[
                "Programming Language :: Python :: 3",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: End Users/Desktop",
                "Topic :: Games/Entertainment :: Board Games",
            ],
            python_requires=">=3.8",
            entry_points={
                "console_scripts": [
                    "tictactoe=tictactoe:main",
                ],
            },
        )
        EOF
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

  docker:
    needs: [test, code-quality]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << EOF
        FROM python:3.11-slim
        
        # Set working directory
        WORKDIR /app
        
        # Copy game files
        COPY tictactoe.py .
        COPY test_tictactoe.py .
        
        # Install test dependencies
        RUN pip install --no-cache-dir pytest pytest-cov
        
        # Set entrypoint
        ENTRYPOINT ["python", "tictactoe.py"]
        EOF
    
    - name: Build Docker image
      run: |
        docker build -t tictactoe:latest .
        docker tag tictactoe:latest tictactoe:${{ github.sha }}
    
    - name: Test Docker image
      run: |
        # Run tests in container
        docker run --rm tictactoe:latest python -m pytest test_tictactoe.py -v
    
    - name: Save Docker image
      run: |
        docker save tictactoe:latest > tictactoe.tar
    
    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: tictactoe.tar

  integration-test:
    needs: [test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install game
      run: |
        pip install -e .
      continue-on-error: true
    
    - name: Run integration test
      run: |
        python -c "from tictactoe import TicTacToe; game = TicTacToe(); print('Game initialized successfully on ${{ matrix.os }}')"

  release:
    needs: [build-and-package, docker, integration-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          # Tic Tac Toe Game Release 🎮
          
          ## Installation
          ```bash
          pip install tictactoe-game-*.whl
          ```
          
          ## Running the game
          ```bash
          tictactoe
          # or
          python tictactoe.py
          ```
          
          ## Docker
          ```bash
          docker load < tictactoe.tar
          docker run -it tictactoe:latest
          ```
          
          ## Changes
          See commit history for detailed changes.
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/tictactoe_game-1.0.0-py3-none-any.whl
        asset_name: tictactoe_game-1.0.0-py3-none-any.whl
        asset_content_type: application/zip